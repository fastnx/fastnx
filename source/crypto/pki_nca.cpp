#include <unordered_map>

#include <mbedtls/rsa.h>
#include <crypto/types.h>
#include <crypto/checksum.h>


namespace FastNx::Crypto {
    enum class FixedNcaType {
        NcaHeader
    };
    std::unordered_map<FixedNcaType, Rsa2048> pkisign{
        {FixedNcaType::NcaHeader, {0xBF, 0xBE, 0x40, 0x6C, 0xF4, 0xA7, 0x80, 0xE9, 0xF0, 0x7D, 0x0C, 0x99, 0x61, 0x1D, 0x77, 0x2F, 0x96, 0xBC, 0x4B, 0x9E, 0x58, 0x38, 0x1B, 0x03, 0xAB, 0xB1, 0x75, 0x49, 0x9F, 0x2B, 0x4D, 0x58, 0x34, 0xB0, 0x05, 0xA3, 0x75, 0x22, 0xBE, 0x1A, 0x3F, 0x03, 0x73, 0xAC, 0x70, 0x68, 0xD1, 0x16, 0xB9, 0x04, 0x46, 0x5E, 0xB7, 0x07, 0x91, 0x2F, 0x07, 0x8B, 0x26, 0xDE, 0xF6, 0x00, 0x07, 0xB2, 0xB4, 0x51, 0xF8, 0x0D, 0x0A, 0x5E, 0x58, 0xAD, 0xEB, 0xBC, 0x9A, 0xD6, 0x49, 0xB9, 0x64, 0xEF, 0xA7, 0x82, 0xB5, 0xCF, 0x6D, 0x70, 0x13, 0xB0, 0x0F, 0x85, 0xF6, 0xA9, 0x08, 0xAA, 0x4D, 0x67, 0x66, 0x87, 0xFA, 0x89, 0xFF, 0x75, 0x90, 0x18, 0x1E, 0x6B, 0x3D, 0xE9, 0x8A, 0x68, 0xC9, 0x26, 0x04, 0xD9, 0x80, 0xCE, 0x3F, 0x5E, 0x92, 0xCE, 0x01, 0xFF, 0x06, 0x3B, 0xF2, 0xC1, 0xA9, 0x0C, 0xCE, 0x02, 0x6F, 0x16, 0xBC, 0x92, 0x42, 0x0A, 0x41, 0x64, 0xCD, 0x52, 0xB6, 0x34, 0x4D, 0xAE, 0xC0, 0x2E, 0xDE, 0xA4, 0xDF, 0x27, 0x68, 0x3C, 0xC1, 0xA0, 0x60, 0xAD, 0x43, 0xF3, 0xFC, 0x86, 0xC1, 0x3E, 0x6C, 0x46, 0xF7, 0x7C, 0x29, 0x9F, 0xFA, 0xFD, 0xF0, 0xE3, 0xCE, 0x64, 0xE7, 0x35, 0xF2, 0xF6, 0x56, 0x56, 0x6F, 0x6D, 0xF1, 0xE2, 0x42, 0xB0, 0x83, 0x40, 0xA5, 0xC3, 0x20, 0x2B, 0xCC, 0x9A, 0xAE, 0xCA, 0xED, 0x4D, 0x70, 0x30, 0xA8, 0x70, 0x1C, 0x70, 0xFD, 0x13, 0x63, 0x29, 0x02, 0x79, 0xEA, 0xD2, 0xA7, 0xAF, 0x35, 0x28, 0x32, 0x1C, 0x7B, 0xE6, 0x2F, 0x1A, 0xAA, 0x40, 0x7E, 0x32, 0x8C, 0x27, 0x42, 0xFE, 0x82, 0x78, 0xEC, 0x0D, 0xEB, 0xE6, 0x83, 0x4B, 0x6D, 0x81, 0x04, 0x40, 0x1A, 0x9E, 0x9A, 0x67, 0xF6, 0x72, 0x29, 0xFA, 0x04, 0xF0, 0x9D, 0xE4, 0xF4, 0x03}}
    };

    bool VerifyNcaSignature(const void *content, const U64 size, const Rsa2048 &signature) {
        constexpr auto type{FixedNcaType::NcaHeader};

        std::optional<Rsa2048 *> fixedKey;
        if (const auto sign{pkisign.find(type)}; sign != pkisign.end())
            fixedKey = &sign->second;

        if (!fixedKey)
            return {};
        Checksum sigsum;
        std::array<U8, 0x20> sumchunk;
        sigsum.Update(std::span(static_cast<const U8 *>(content), size));
        sigsum.Finish(sumchunk);

        mbedtls_rsa_context rsa;
        mbedtls_rsa_init(&rsa);

        static std::array<U8, 3> expoent{1, 0, 1};
        std::array<mbedtls_mpi, 2> mpis;
        for (auto &mpi: mpis) {
            mbedtls_mpi_init(&mpi);
        }
        mbedtls_mpi_read_binary(&mpis[0], (*fixedKey)->data(), sizeof(Rsa2048));
        mbedtls_mpi_read_binary(&mpis[1], expoent.data(), expoent.size());

        mbedtls_rsa_import(&rsa, &mpis[0], nullptr, nullptr, nullptr, &mpis[1]);
        NX_ASSERT(mbedtls_rsa_check_pubkey(&rsa) == 0);
        const auto result{mbedtls_rsa_rsassa_pss_verify(&rsa, MBEDTLS_MD_SHA256, sumchunk.size(), sumchunk.data(), signature.data())};

        mbedtls_rsa_free(&rsa);
        for (auto &mpi: mpis) {
            mbedtls_mpi_free(&mpi);
        }

        if (result != 0)
            NX_ASSERT(result == MBEDTLS_ERR_RSA_VERIFY_FAILED);
        return result == 0;
    }
}
